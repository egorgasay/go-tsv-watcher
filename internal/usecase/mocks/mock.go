// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	events "go-tsv-watcher/internal/events"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockIUseCase is a mock of IUseCase interface.
type MockIUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUseCaseMockRecorder
}

// MockIUseCaseMockRecorder is the mock recorder for MockIUseCase.
type MockIUseCaseMockRecorder struct {
	mock *MockIUseCase
}

// NewMockIUseCase creates a new mock instance.
func NewMockIUseCase(ctrl *gomock.Controller) *MockIUseCase {
	mock := &MockIUseCase{ctrl: ctrl}
	mock.recorder = &MockIUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUseCase) EXPECT() *MockIUseCaseMockRecorder {
	return m.recorder
}

// GetEventByNumber mocks base method.
func (m *MockIUseCase) GetEventByNumber(ctx context.Context, unitGUID string, number int) (events.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByNumber", ctx, unitGUID, number)
	ret0, _ := ret[0].(events.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByNumber indicates an expected call of GetEventByNumber.
func (mr *MockIUseCaseMockRecorder) GetEventByNumber(ctx, unitGUID, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByNumber", reflect.TypeOf((*MockIUseCase)(nil).GetEventByNumber), ctx, unitGUID, number)
}

// Process mocks base method.
func (m *MockIUseCase) Process(ctx context.Context, refresh time.Duration, dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", ctx, refresh, dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockIUseCaseMockRecorder) Process(ctx, refresh, dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockIUseCase)(nil).Process), ctx, refresh, dir)
}
