// Code generated by MockGen. DO NOT EDIT.
// Source: go-tsv-watcher/internal/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	events "go-tsv-watcher/internal/events"
	service "go-tsv-watcher/internal/storage/service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddFilename mocks base method.
func (m *MockStorage) AddFilename(arg0 context.Context, arg1 string, arg2 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilename", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilename indicates an expected call of AddFilename.
func (mr *MockStorageMockRecorder) AddFilename(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilename", reflect.TypeOf((*MockStorage)(nil).AddFilename), arg0, arg1, arg2)
}

// GetEventByNumber mocks base method.
func (m *MockStorage) GetEventByNumber(arg0 context.Context, arg1 string, arg2 int) (events.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventByNumber", arg0, arg1, arg2)
	ret0, _ := ret[0].(events.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventByNumber indicates an expected call of GetEventByNumber.
func (mr *MockStorageMockRecorder) GetEventByNumber(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventByNumber", reflect.TypeOf((*MockStorage)(nil).GetEventByNumber), arg0, arg1, arg2)
}

// LoadFilenames mocks base method.
func (m *MockStorage) LoadFilenames(arg0 context.Context, arg1 service.Adder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFilenames", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFilenames indicates an expected call of LoadFilenames.
func (mr *MockStorageMockRecorder) LoadFilenames(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFilenames", reflect.TypeOf((*MockStorage)(nil).LoadFilenames), arg0, arg1)
}

// SaveEvents mocks base method.
func (m *MockStorage) SaveEvents(arg0 context.Context, arg1 service.IEvents) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEvents", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEvents indicates an expected call of SaveEvents.
func (mr *MockStorageMockRecorder) SaveEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEvents", reflect.TypeOf((*MockStorage)(nil).SaveEvents), arg0, arg1)
}
